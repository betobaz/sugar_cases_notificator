// Generated by CoffeeScript 1.3.3
(function() {
  var connect, schemas, _;

  connect = require('connect');

  _ = require("underscore");

  schemas = require('./schemas');

  module.exports = function(io, mongoose) {
    GLOBAL.clients = [];
    return io.sockets.on('connection', function(socket) {
      socket.emit('news', {
        myMessages: ['world']
      });
      socket.on('storeClientInfo', function(data) {
        var NotificacionModel;
        if (data.contact_id) {
          GLOBAL.clients.push({
            socket_id: socket.id,
            contact_id: data.contact_id
          });
        }
        NotificacionModel = mongoose.model('Notification', schemas.Notification);
        NotificacionModel.find().where('contact_id').equals(data.contact_id).select().exec(function(err, notifications) {
          if (!err) {
            return socket.emit('nuevas_notificaciones', {
              notificaciones: notifications
            });
          } else {
            return console.log(err);
          }
        });
        return console.log("clients", clients);
      });
      socket.on('disconnect', function(data) {
        var clients;
        clients = _.filter(clients, function(item) {
          item.socket_id !== socket.id;
          return console.log("el cliente del socket " + socket.id + " se ha desconectado");
        });
        return console.log("clients", clients);
      });
      return socket.on('my other event', function(data) {
        var messageBuffer;
        if (data.message) {
          messageBuffer.push({
            message: data.message,
            status: 'unread',
            date_entered: new Date
          });
        }
        if (messageBuffer.length === 3) {
          console.log(messageBuffer);
          io.sockets.emit('nuevas_notificaciones', {
            notificaciones: messageBuffer
          });
          messageBuffer = [];
        }
        return console.log(data);
      });
    });
  };

}).call(this);
